var searchIndex = {};
searchIndex["conway_rs"] = {"doc":"A simple implementation of Conway's Game of Life","items":[[0,"grid","conway_rs","This module handles the all cells given a struct called Grid.",null,null],[3,"Grid","conway_rs::grid","Grid abstraction as 2D plane containing the cells and its state",null,null],[12,"cells","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new grid based on the width and height.",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"grid"}}],[11,"random_grid","","Generate a new grid using random numbers to determine the state of the cells",0,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"grid"}}],[11,"new_generation","","Create a new generation for all cells applying the rules of Conway's Game of Life (defined on Cell::update) based on the old state and the neighbors.",0,{"inputs":[{"name":"self"}],"output":{"name":"grid"}}],[11,"cell","","access the internal vector of grid based on the 2D point (x,y). Returns the cell.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"cell"}}],[11,"neighbors","","Return the number of neighbors alive from a given cell.",0,{"inputs":[{"name":"self"},{"name":"cell"}],"output":{"name":"u8"}}],[11,"fmt","","Display all the grid and its cell state.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cell","conway_rs","This module handle the individual life of each cell.",null,null],[3,"Point","conway_rs::cell","A simple 2D point on plane",null,null],[12,"x","","",1,null],[12,"y","","",1,null],[3,"Cell","","Automata 2D Cell implementation methods",null,null],[12,"alive","","",2,null],[12,"point","","",2,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Point structure",1,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"point"}}],[11,"new","","Create a new cell element.",2,{"inputs":[{"name":"bool"},{"name":"i32"},{"name":"i32"}],"output":{"name":"cell"}}],[11,"state","","Update the state of creating a new cell.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"cell"}}],[11,"update","","Apply logic for a new state based on the number of neighbors The core of Conway's game of life.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"cell"}}],[11,"fmt","","Write a dot if cell is alive, otherwise white-space.",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"utils","conway_rs","This module contains the random_state function used in random_grid",null,null],[5,"random_state","conway_rs::utils","Return true with 25% of probability",null,{"inputs":[],"output":{"name":"bool"}}]],"paths":[[3,"Grid"],[3,"Point"],[3,"Cell"]]};
initSearch(searchIndex);
